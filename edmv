#!/usr/bin/env python

# todo:
#  lol testing
#  lol comments
#  maybe bring back the header
#  check box options: lowercase, uppercase, capitalize, camel case strip punctuation, add suffix
#  delete files that have empty lines
#  preview changes to user
#  actual help/man page
#  do something with the command line flags

import argparse
import os
import shutil
import subprocess
import sys
import tempfile

parser = argparse.ArgumentParser(
    prog="edmv", description="Rename files using your editor.")
parser.add_argument("files",
                    metavar="FILE",
                    nargs="*",
                    help="The filenames to rename.")
parser.add_argument("-y", "--yes",
                    action="store_true",
                    default=False,
                    help="Yes, rename the files.")
parser.add_argument("-n", "--no",
                    action="store_true",
                    default=False,
                    help="Dry run. Prints what would happen, "
                         "but doesn't move files.")
parser.add_argument("-e", "--editor",
                    type=str,
                    default=None,
                    help="Specify your editor explicitly, instead "
                         "of EDMV_EDITOR or EDITOR.")

args = parser.parse_args()


def die(msg):
  sys.stderr.write(msg + "\n")
  exit(1)

to_rename = args.files

if not to_rename:
  parser.print_help()
  die("")

editor = os.environ.get("EDMV_EDITOR") or os.environ.get('EDITOR') or 'vi'

with tempfile.NamedTemporaryFile(prefix="edmv", delete=False) as f:
  path = f.name
  f.write("\n".join(to_rename).encode('utf-8'))

# todo: print some kind of warning prompt and make user type "Ok" or "yes"

# todo: deeply consider the security implications and possible advantages of
#       using "shell=True"
code = subprocess.call(editor.split() + [path])

if code != 0:
  die("call to editor failed! giving up.")

with open(path) as f:
  edited = f.readlines()

os.remove(path)

if len(edited) != len(to_rename):
  die("line count mismatch. giving up")

for i in range(len(to_rename)):
  # todo: do something sane with leading and trailing whitespace
  pre  = to_rename[i].strip()
  post = edited[i].strip()
  # todo: check that the names are actually different
  # todo: check if original file is still there
  # todo: check if original file can be removed
  # todo: check if destination file exists
  # todo: check that original directory and destination directory are the same
  print(" ".join([pre, "->", post]))
  shutil.move(pre, post)
