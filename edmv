#!/usr/bin/env python

import argparse, os, shutil, subprocess, sys, tempfile

parser = argparse.ArgumentParser(prog="edmv", description="Rename files with your favorite editor.")

parser.add_argument("src_files",
                    metavar="FILE",
                    nargs="+",
                    help="The file(s) to rename.")

parser.add_argument("-n", "--no",
                    action="store_true",
                    default=False,
                    help="Dry run. Prints what would happen, but doesn't move files.")

parser.add_argument("-e", "--editor",
                    type=str,
                    default=None,
                    help="Specify your editor explicitly, instead of using $EDMV_EDITOR or $EDITOR.")

args = parser.parse_args()

def die(msg='', code=1):
  sys.stderr.write("edmv: %s\n" % msg)
  exit(code)

src_files = args.src_files
file_count = len(src_files)

editor = args.editor or os.environ.get("EDMV_EDITOR") or os.environ.get('EDITOR') or 'vi'

with tempfile.NamedTemporaryFile(prefix="edmv", delete=False) as f:
  tmpfile = f.name
  f.write("\n".join(src_files).encode('utf-8'))

code = subprocess.call("%s %s" % (editor, tmpfile), shell=True)

if code != 0:
  die("call to %s failed with return code %s" % (editor, code))

with open(tmpfile) as f:
  dst_files = f.read().splitlines()

os.remove(tmpfile)

if len(dst_files) != file_count:
  die("line count bad: should be %s, actually %s" % (file_count, len(dst_files)))

for src, dst in zip(src_files, dst_files):
  if not dst:
    die("bad path: '%s'" % dst)
  if src == dst:
    sys.stderr.write("%s == %s\n" % (src, dst))
    continue
  sys.stderr.write("%s -> %s\n" % (src, dst))
  if not args.no:
    shutil.move(src, dst)
